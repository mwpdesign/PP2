name: Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: healthcare-ivr
  ECS_CLUSTER: healthcare-ivr-cluster
  ECS_SERVICE: healthcare-ivr-service
  TERRAFORM_VERSION: 1.0.0

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://healthcare-ivr.example.com

    steps:
    - uses: actions/checkout@v3

    # AWS authentication
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    # Build and push Docker images
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and push backend image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./backend
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    # Infrastructure deployment
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: Terraform Init
      run: |
        cd infrastructure
        terraform init

    - name: Terraform Plan
      run: |
        cd infrastructure
        terraform plan -out=tfplan

    - name: Terraform Apply
      run: |
        cd infrastructure
        terraform apply -auto-approve tfplan

    # Blue-Green Deployment
    - name: Deploy to ECS
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: task-definition.json
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
        codedeploy-appspec: appspec.yaml
        codedeploy-application: healthcare-ivr
        codedeploy-deployment-group: healthcare-ivr-blue-green

    # Health check
    - name: Health check
      run: |
        curl --fail https://healthcare-ivr.example.com/health || exit 1

    # Backup
    - name: Backup database
      run: |
        aws rds create-db-snapshot \
          --db-instance-identifier healthcare-ivr \
          --db-snapshot-identifier backup-${{ github.sha }}

    # Notifications
    - name: Notify deployment success
      if: success()
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_COLOR: '#36a64f'
        SLACK_MESSAGE: 'Deployment successful!'
        SLACK_TITLE: Deployment Status

    - name: Notify deployment failure
      if: failure()
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_COLOR: '#FF0000'
        SLACK_MESSAGE: 'Deployment failed!'
        SLACK_TITLE: Deployment Status 