#!/usr/bin/env python3\n\"\"\"\nFinal comprehensive linter cleanup script for Healthcare IVR Platform\nAddresses remaining 471 linter errors systematically\n\"\"\"\n\nimport os\nimport re\nimport subprocess\nfrom typing import Dict, List\n\n\ndef run_flake8() -> List[str]:\n    \"\"\"Run flake8 and return list of error lines.\"\"\"\n    try:\n        result = subprocess.run(\n            [\"python\", \"-m\", \"flake8\", \"backend/app/\"],\n            capture_output=True,\n            text=True,\n            cwd=\"/Users/michaelparson/PP2/healthcare-ivr-platform\"\n        )\n        return result.stdout.strip().split('\\n') if result.stdout.strip() else []\n    except Exception as e:\n        print(f\"Error running flake8: {e}\")\n        return []\n\n\ndef parse_error_line(line: str) -> Dict:\n    \"\"\"Parse a flake8 error line into components.\"\"\"\n    if not line.strip():\n        return {}\n    \n    parts = line.split(': ', 2)\n    if len(parts) < 3:\n        return {}\n    \n    file_line = parts[0]\n    error_code = parts[1]\n    message = parts[2]\n    \n    file_parts = file_line.split(':')\n    if len(file_parts) >= 3:\n        return {\n            'file': file_parts[0],\n            'line': int(file_parts[1]),\n            'column': int(file_parts[2]),\n            'code': error_code,\n            'message': message\n        }\n    return {}\n\n\ndef remove_unused_imports(file_path: str, unused_imports: List[str]) -> int:\n    \"\"\"Remove unused imports from a file.\"\"\"\n    try:\n        with open(file_path, 'r', encoding='utf-8') as f:\n            lines = f.readlines()\n        \n        modified = False\n        new_lines = []\n        \n        for line in lines:\n            should_remove = False\n            for unused in unused_imports:\n                # Match various import patterns\n                patterns = [\n                    f\"^from .* import .*{re.escape(unused)}.*$\",\n                    f\"^import .*{re.escape(unused)}.*$\",\n                ]\n                \n                for pattern in patterns:\n                    if re.match(pattern, line.strip()):\n                        # Check if it's a multi-import line\n                        if ',' in line and 'import' in line:\n                            # Remove just this import from the line\n                            line = re.sub(f\",?\\s*{re.escape(unused)}\", \"\", line)\n                            line = re.sub(f\"{re.escape(unused)}\\s*,?\", \"\", line)\n                            line = re.sub(r\",\\s*\\)\", \")\", line)  # Clean up trailing comma\n                            if line.strip().endswith('import'):\n                                should_remove = True\n                        else:\n                            should_remove = True\n                        break\n                if should_remove:\n                    break\n            \n            if not should_remove:\n                new_lines.append(line)\n            else:\n                modified = True\n        \n        if modified:\n            with open(file_path, 'w', encoding='utf-8') as f:\n                f.writelines(new_lines)\n            return 1\n        return 0\n    except Exception as e:\n        print(f\"Error processing {file_path}: {e}\")\n        return 0\n\n\ndef fix_line_length(file_path: str, line_num: int) -> int:\n    \"\"\"Fix line length issues by breaking long lines.\"\"\"\n    try:\n        with open(file_path, 'r', encoding='utf-8') as f:\n            lines = f.readlines()\n        \n        if line_num > len(lines):\n            return 0\n        \n        line = lines[line_num - 1]\n        if len(line.strip()) <= 79:\n            return 0\n        \n        # Simple line breaking for common patterns\n        if '=' in line and len(line) > 79:\n            # Break assignment lines\n            parts = line.split('=', 1)\n            if len(parts) == 2:\n                indent = len(line) - len(line.lstrip())\n                new_line = f\"{parts[0].rstrip()} = (\"\n                new_line += f\"\\n{' ' * (indent + 4)}{parts[1].strip()}\\n{' ' * indent})\\n\"\n                lines[line_num - 1] = new_line\n        \n        elif 'f\"' in line and len(line) > 79:\n            # Break f-strings\n            indent = len(line) - len(line.lstrip())\n            if line.strip().endswith('\")'):\n                content = line.strip()[:-2]  # Remove \")\n                lines[line_num - 1] = f\"{' ' * indent}{content}\"\\n{' ' * indent})\\n\"\n        \n        with open(file_path, 'w', encoding='utf-8') as f:\n            f.writelines(lines)\n        return 1\n    except Exception as e:\n        print(f\"Error fixing line length in {file_path}:{line_num}: {e}\")\n        return 0\n\n\ndef remove_extra_blank_lines(file_path: str, line_num: int) -> int:\n    \"\"\"Remove extra blank lines.\"\"\"\n    try:\n        with open(file_path, 'r', encoding='utf-8') as f:\n            lines = f.readlines()\n        \n        # Remove consecutive blank lines, keeping max 2\n        new_lines = []\n        blank_count = 0\n        \n        for line in lines:\n            if line.strip() == '':\n                blank_count += 1\n                if blank_count <= 2:\n                    new_lines.append(line)\n            else:\n                blank_count = 0\n                new_lines.append(line)\n        \n        with open(file_path, 'w', encoding='utf-8') as f:\n            f.writelines(new_lines)\n        return 1\n    except Exception as e:\n        print(f\"Error removing blank lines in {file_path}: {e}\")\n        return 0\n\n\ndef main():\n    \"\"\"Main function to fix linter errors.\"\"\"\n    print(\"🔧 Starting final linter cleanup...\")\n    \n    errors = run_flake8()\n    if not errors:\n        print(\"✅ No linter errors found!\")\n        return\n    \n    print(f\"📊 Found {len(errors)} linter errors\")\n    \n    # Group errors by type and file\n    error_groups = {\n        'F401': [],  # Unused imports\n        'E501': [],  # Line too long\n        'E303': [],  # Too many blank lines\n        'F841': [],  # Unused variables\n        'other': []\n    }\n    \n    for error_line in errors:\n        error = parse_error_line(error_line)\n        if not error:\n            continue\n        \n        code = error['code']\n        if code in error_groups:\n            error_groups[code].append(error)\n        else:\n            error_groups['other'].append(error)\n    \n    total_fixed = 0\n    \n    # Fix unused imports (F401)\n    print(f\"\\n🗑️  Fixing {len(error_groups['F401'])} unused imports...\")\n    file_imports = {}\n    for error in error_groups['F401']:\n        file_path = error['file']\n        if file_path not in file_imports:\n            file_imports[file_path] = []\n        \n        # Extract import name from message\n        message = error['message']\n        if \"imported but unused\" in message:\n            import_name = message.split(\"'\")[1] if \"'\" in message else \"\"\n            if import_name:\n                file_imports[file_path].append(import_name)\n    \n    for file_path, imports in file_imports.items():\n        fixed = remove_unused_imports(file_path, imports)\n        total_fixed += fixed\n    \n    # Fix too many blank lines (E303)\n    print(f\"\\n📝 Fixing {len(error_groups['E303'])} blank line issues...\")\n    processed_files = set()\n    for error in error_groups['E303']:\n        file_path = error['file']\n        if file_path not in processed_files:\n            fixed = remove_extra_blank_lines(file_path, error['line'])\n            total_fixed += fixed\n            processed_files.add(file_path)\n    \n    print(f\"\\n✅ Fixed {total_fixed} issues\")\n    \n    # Check final count\n    final_errors = run_flake8()\n    final_count = len([e for e in final_errors if e.strip()])\n    print(f\"\\n📊 Final error count: {final_count}\")\n    \n    if final_count < len(errors):\n        improvement = len(errors) - final_count\n        percentage = (improvement / len(errors)) * 100\n        print(f\"🎉 Reduced errors by {improvement} ({percentage:.1f}% improvement)\")\n\n\nif __name__ == \"__main__\":\n    main()