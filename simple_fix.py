#!/usr/bin/env python3\n\nimport subprocess\nimport re\n\ndef get_f401_errors():\n    \"\"\"Get all F401 unused import errors.\"\"\"\n    result = subprocess.run(\n        ['python', '-m', 'flake8', 'backend/app/', '--select=F401'],\n        capture_output=True, text=True\n    )\n    return result.stdout.strip().split('\\n') if result.stdout.strip() else []\n\ndef fix_unused_imports():\n    \"\"\"Fix unused imports by removing them.\"\"\"\n    errors = get_f401_errors()\n    print(f\"Found {len(errors)} unused import errors\")\n    \n    # Group by file\n    files_to_fix = {}\n    for error in errors:\n        if ':' in error and \"'\" in error:\n            file_path = error.split(':')[0]\n            import_name = error.split(\"'\")[1]\n            \n            if file_path not in files_to_fix:\n                files_to_fix[file_path] = []\n            files_to_fix[file_path].append(import_name)\n    \n    fixed_count = 0\n    for file_path, imports in files_to_fix.items():\n        try:\n            with open(file_path, 'r') as f:\n                content = f.read()\n            \n            original_content = content\n            \n            # Remove unused imports\n            for import_name in imports:\n                # Pattern for \"from x import y\" where y is the unused import\n                pattern1 = rf\"from\\s+[\\w\\.]+\\s+import\\s+.*{re.escape(import_name)}.*\\n\"\n                # Pattern for \"import x\" where x is the unused import\n                pattern2 = rf\"import\\s+{re.escape(import_name)}.*\\n\"\n                \n                # Try to remove the import\n                content = re.sub(pattern1, \"\", content)\n                content = re.sub(pattern2, \"\", content)\n            \n            if content != original_content:\n                with open(file_path, 'w') as f:\n                    f.write(content)\n                fixed_count += 1\n                print(f\"Fixed {file_path}\")\n        \n        except Exception as e:\n            print(f\"Error fixing {file_path}: {e}\")\n    \n    print(f\"Fixed {fixed_count} files\")\n    return fixed_count\n\ndef main():\n    print(\"ðŸ”§ Starting simple linter fixes...\")\n    \n    # Get initial count\n    result = subprocess.run(\n        ['python', '-m', 'flake8', 'backend/app/', '--count'],\n        capture_output=True, text=True\n    )\n    initial_count = int(result.stdout.strip()) if result.stdout.strip().isdigit() else 0\n    print(f\"Initial error count: {initial_count}\")\n    \n    # Fix unused imports\n    fixed = fix_unused_imports()\n    \n    # Get final count\n    result = subprocess.run(\n        ['python', '-m', 'flake8', 'backend/app/', '--count'],\n        capture_output=True, text=True\n    )\n    final_count = int(result.stdout.strip()) if result.stdout.strip().isdigit() else 0\n    print(f\"Final error count: {final_count}\")\n    \n    if final_count < initial_count:\n        improvement = initial_count - final_count\n        percentage = (improvement / initial_count) * 100\n        print(f\"ðŸŽ‰ Reduced errors by {improvement} ({percentage:.1f}% improvement)\")\n\nif __name__ == \"__main__\":\n    main()