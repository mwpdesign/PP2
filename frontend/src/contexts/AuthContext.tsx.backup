import React, { createContext, useContext, useState, useCallback, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import type { UserRole } from '../types/auth';
import api from '../services/api';
import config from '../config';

interface User {
  id: string;
  email: string;
  firstName: string;
  lastName: string;
  role: UserRole;
  organization_id: string;
  permissions?: string[];
  is_superuser?: boolean;
}

interface AuthState {
  isAuthenticated: boolean;
  user: User | null;
  token: string | null;
}

interface AuthContextType extends AuthState {
  login: (email: string, password: string) => Promise<void>;
  logout: () => void;
  clearAuth: () => void;
  isLoading: boolean;
  error: string | null;
  getToken: () => string | null;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

// Token expiration check interval (5 minutes)
const TOKEN_CHECK_INTERVAL = 5 * 60 * 1000;

export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const navigate = useNavigate();
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [state, setState] = useState<AuthState>({
    isAuthenticated: false,
    user: null,
    token: null,
  });

  useEffect(() => {
    // Check for stored auth data on mount
    const token = localStorage.getItem('token');
    const user = localStorage.getItem('user');
    if (token && user) {
      setState({
        isAuthenticated: true,
        user: JSON.parse(user),
        token,
      });
    }
  }, []);

  // Listen for auth errors
  useEffect(() => {
    const handleAuthError = () => {
      clearAuth();
      navigate('/login');
    };

    window.addEventListener('auth:error', handleAuthError);
    return () => window.removeEventListener('auth:error', handleAuthError);
  }, [navigate]);

  const login = useCallback(async (email: string, password: string) => {
    setIsLoading(true);
    setError(null);
    try {
      // Create form data for OAuth2 password flow
      const formData = new URLSearchParams();
      formData.append('username', email);
      formData.append('password', password);

      // Make login request with correct content type
      const response = await api.post('/api/v1/auth/login', formData, {
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
        },
      });

      const { access_token, refresh_token } = response.data;

      // Decode token to get user info
      const tokenData = JSON.parse(atob(access_token.split('.')[1]));

      // Create user object
      const user: User = {
        id: tokenData.sub,
        email: email,
        firstName: tokenData.first_name || 'Demo',
        lastName: tokenData.last_name || 'User',
        role: tokenData.role,
        organization_id: tokenData.organization_id,
        permissions: tokenData.permissions || [],
        is_superuser: tokenData.is_superuser,
      };

      // Store auth data
      localStorage.setItem('token', access_token);
      if (refresh_token) {
        localStorage.setItem('refresh_token', refresh_token);
      }
      localStorage.setItem('user', JSON.stringify(user));

      setState({
        isAuthenticated: true,
        user,
        token: access_token,
      });

      // Navigate based on role
      if (user.role === 'Admin' || user.is_superuser) {
        navigate('/admin/dashboard');
      } else {
        navigate('/dashboard');
      }
    } catch (err: any) {
      console.error('Login error:', err);
      if (err.response?.status === 401) {
        setError('Invalid credentials. Please try again.');
      } else if (err.response?.status === 404) {
        setError('Authentication service is not available. Please try again later.');
      } else {
        setError(err.response?.data?.detail || 'An error occurred during login. Please try again.');
      }
      throw err;
    } finally {
      setIsLoading(false);
    }
  }, [navigate]);

  const logout = useCallback(() => {
    localStorage.removeItem('token');
    localStorage.removeItem('refresh_token');
    localStorage.removeItem('user');
    setState({
      isAuthenticated: false,
      user: null,
      token: null,
    });
    navigate('/login');
  }, [navigate]);

  const clearAuth = useCallback(() => {
    localStorage.removeItem('token');
    localStorage.removeItem('refresh_token');
    localStorage.removeItem('user');
    setState({
      isAuthenticated: false,
      user: null,
      token: null,
    });
  }, []);

  const getToken = useCallback(() => {
    return state.token;
  }, [state.token]);

  return (
    <AuthContext.Provider
      value={{
        ...state,
        login,
        logout,
        clearAuth,
        isLoading,
        error,
        getToken,
      }}
    >
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
}; 