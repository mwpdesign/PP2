"""Add accessible_territories relationship to Role model

Revision ID: 2248d882fb10
Revises: 20240320_006_create_ivr_tables
Create Date: 2025-05-24 03:26:48.491303+00:00

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '2248d882fb10'
down_revision: Union[str, None] = '20240320_006_create_ivr_tables'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Drop tables in correct order (dependent tables first)
    op.drop_table('shipping_addresses')
    op.drop_table('shipment_tracking')
    op.drop_table('shipment_packages')
    op.drop_table('shipments')

    # Create new tables
    op.create_table('audit_logs',
    sa.Column('id', postgresql.UUID(as_uuid=True), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('action', sa.String(length=100), nullable=False),
    sa.Column('resource_type', sa.String(length=50), nullable=False),
    sa.Column('resource_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('territory_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('details', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('created_by_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('updated_by_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['territory_id'], ['territories.id'], ),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_audit_logs_id'), 'audit_logs', ['id'], unique=False)
    op.create_table('audit_reports',
    sa.Column('id', postgresql.UUID(as_uuid=True), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('report_type', sa.String(length=50), nullable=False),
    sa.Column('territory_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('start_date', sa.DateTime(), nullable=False),
    sa.Column('end_date', sa.DateTime(), nullable=False),
    sa.Column('report_data', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('created_by_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('updated_by_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['territory_id'], ['territories.id'], ),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_audit_reports_id'), 'audit_reports', ['id'], unique=False)
    op.create_table('compliance_checks',
    sa.Column('id', postgresql.UUID(as_uuid=True), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('check_type', sa.String(length=50), nullable=False),
    sa.Column('territory_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('results', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('created_by_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('updated_by_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['territory_id'], ['territories.id'], ),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_compliance_checks_id'), 'compliance_checks', ['id'], unique=False)
    op.create_table('security_incidents',
    sa.Column('id', postgresql.UUID(as_uuid=True), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('incident_type', sa.String(length=50), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('reported_by', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('territory_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('severity', sa.String(length=20), nullable=False),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('affected_resources', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('incident_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('reported_at', sa.DateTime(), nullable=True),
    sa.Column('resolved_at', sa.DateTime(), nullable=True),
    sa.Column('resolution_notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('created_by_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('updated_by_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['reported_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['territory_id'], ['territories.id'], ),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_security_incidents_id'), 'security_incidents', ['id'], unique=False)
    op.create_table('phi_access_logs',
    sa.Column('id', postgresql.UUID(as_uuid=True), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('patient_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('action', sa.String(length=50), nullable=False),
    sa.Column('territory_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('resource_type', sa.String(length=50), nullable=False),
    sa.Column('resource_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('accessed_fields', sa.ARRAY(sa.String()), nullable=False),
    sa.Column('ip_address', sa.String(length=50), nullable=True),
    sa.Column('user_agent', sa.String(length=255), nullable=True),
    sa.Column('request_id', sa.String(length=100), nullable=True),
    sa.Column('correlation_id', sa.String(length=100), nullable=True),
    sa.Column('session_id', sa.String(length=100), nullable=True),
    sa.Column('access_reason', sa.String(length=255), nullable=True),
    sa.Column('access_location', sa.String(length=100), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('created_by_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('updated_by_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['patient_id'], ['patients.id'], ),
    sa.ForeignKeyConstraint(['territory_id'], ['territories.id'], ),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_phi_access_logs_id'), 'phi_access_logs', ['id'], unique=False)

    # Add columns to orders table
    op.add_column('orders', sa.Column('order_number', sa.String(length=50), nullable=False))
    op.add_column('orders', sa.Column('territory_id', postgresql.UUID(as_uuid=True), nullable=False))
    op.add_column('orders', sa.Column('ivr_session_id', sa.String(length=100), nullable=True))
    op.add_column('orders', sa.Column('_total_amount', sa.String(length=500), nullable=True))
    op.add_column('orders', sa.Column('_insurance_data', sa.String(length=2000), nullable=True))
    op.add_column('orders', sa.Column('_payment_info', sa.String(length=2000), nullable=True))
    op.add_column('orders', sa.Column('_delivery_info', sa.String(length=2000), nullable=True))
    op.add_column('orders', sa.Column('completion_date', sa.DateTime(), nullable=True))
    op.add_column('orders', sa.Column('created_by_id', postgresql.UUID(as_uuid=True), nullable=False))
    op.add_column('orders', sa.Column('updated_by_id', postgresql.UUID(as_uuid=True), nullable=False))
    op.alter_column('orders', '_notes',
               existing_type=sa.TEXT(),
               type_=sa.String(length=1000),
               existing_nullable=True)
    op.create_unique_constraint(None, 'orders', ['order_number'])
    op.create_foreign_key(None, 'orders', 'users', ['created_by_id'], ['id'])
    op.create_foreign_key(None, 'orders', 'users', ['updated_by_id'], ['id'])
    op.create_foreign_key(None, 'orders', 'territories', ['territory_id'], ['id'])
    op.drop_column('orders', 'priority')
    op.drop_column('orders', 'order_type')
    op.create_unique_constraint(None, 'patient_documents', ['id'])
    op.create_unique_constraint(None, 'patients', ['id'])
    op.create_unique_constraint(None, 'providers', ['id'])
    op.create_unique_constraint(None, 'secondary_insurance', ['id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'secondary_insurance', type_='unique')
    op.drop_constraint(None, 'providers', type_='unique')
    op.drop_constraint(None, 'patients', type_='unique')
    op.drop_constraint(None, 'patient_documents', type_='unique')
    op.add_column('orders', sa.Column('order_type', postgresql.ENUM('prescription', 'medical_equipment', 'lab_test', 'referral', name='order_type_enum'), autoincrement=False, nullable=False))
    op.add_column('orders', sa.Column('priority', postgresql.ENUM('routine', 'urgent', 'emergency', name='order_priority_enum'), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'orders', type_='foreignkey')
    op.drop_constraint(None, 'orders', type_='foreignkey')
    op.drop_constraint(None, 'orders', type_='foreignkey')
    op.drop_constraint(None, 'orders', type_='unique')
    op.alter_column('orders', '_notes',
               existing_type=sa.String(length=1000),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.drop_column('orders', 'updated_by_id')
    op.drop_column('orders', 'created_by_id')
    op.drop_column('orders', 'completion_date')
    op.drop_column('orders', '_delivery_info')
    op.drop_column('orders', '_payment_info')
    op.drop_column('orders', '_insurance_data')
    op.drop_column('orders', '_total_amount')
    op.drop_column('orders', 'ivr_session_id')
    op.drop_column('orders', 'territory_id')
    op.drop_column('orders', 'order_number')
    op.create_table('shipping_addresses',
    sa.Column('id', postgresql.UUID(as_uuid=True), autoincrement=False, nullable=False),
    sa.Column('shipment_id', postgresql.UUID(as_uuid=True), autoincrement=False, nullable=False),
    sa.Column('address_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('company', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('street1', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('street2', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('city', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('state', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('postal_code', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('country', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('phone', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['shipment_id'], ['shipments.id'], name='shipping_addresses_shipment_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='shipping_addresses_pkey')
    )
    op.create_table('shipment_tracking',
    sa.Column('id', postgresql.UUID(as_uuid=True), autoincrement=False, nullable=False),
    sa.Column('shipment_id', postgresql.UUID(as_uuid=True), autoincrement=False, nullable=False),
    sa.Column('tracking_number', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('carrier', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('location', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('estimated_delivery', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('last_update', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('tracking_url', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('tracking_history', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['shipment_id'], ['shipments.id'], name='shipment_tracking_shipment_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='shipment_tracking_pkey')
    )
    op.create_table('shipments',
    sa.Column('id', postgresql.UUID(as_uuid=True), autoincrement=False, nullable=False),
    sa.Column('order_id', postgresql.UUID(as_uuid=True), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('shipping_method', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('shipping_cost', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('shipping_label_url', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('shipping_notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['order_id'], ['orders.id'], name='shipments_order_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='shipments_pkey')
    )
    op.create_table('shipment_packages',
    sa.Column('id', postgresql.UUID(as_uuid=True), autoincrement=False, nullable=False),
    sa.Column('shipment_id', postgresql.UUID(as_uuid=True), autoincrement=False, nullable=False),
    sa.Column('weight', sa.VARCHAR(length=500), autoincrement=False, nullable=False),
    sa.Column('length', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('width', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('height', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('value', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('reference', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('requires_signature', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('is_temperature_controlled', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('temperature_range', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['shipment_id'], ['shipments.id'], name='shipment_packages_shipment_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='shipment_packages_pkey')
    )
    op.drop_index(op.f('ix_phi_access_logs_id'), table_name='phi_access_logs')
    op.drop_table('phi_access_logs')
    op.drop_index(op.f('ix_security_incidents_id'), table_name='security_incidents')
    op.drop_table('security_incidents')
    op.drop_index(op.f('ix_compliance_checks_id'), table_name='compliance_checks')
    op.drop_table('compliance_checks')
    op.drop_index(op.f('ix_audit_reports_id'), table_name='audit_reports')
    op.drop_table('audit_reports')
    op.drop_index(op.f('ix_audit_logs_id'), table_name='audit_logs')
    op.drop_table('audit_logs')
    # ### end Alembic commands ### 