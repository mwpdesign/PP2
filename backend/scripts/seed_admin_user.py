import asyncio
import logging
import os
import sys

from sqlalchemy import select

# Add the backend directory to Python path for imports
backend_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
if backend_dir not in sys.path:
    sys.path.insert(0, backend_dir)

# Now we can import from app
from app.core.database import AsyncSessionLocal, engine  # noqa: E402
from app.models.user import User  # noqa: E402
from app.models.organization import Organization  # noqa: E402
from app.models.rbac import Role  # noqa: E402

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

ADMIN_EMAIL = "admin@example.com"
ADMIN_PASSWORD = "password123"  # This will be hashed by user.set_password()
DEFAULT_ORG_NAME = "Default Healthcare Org"
ADMIN_ROLE_NAME = "System Admin"


async def seed_data():
    """Seed the database with admin user, organization, and role."""
    async with AsyncSessionLocal() as session:
        async with session.begin():
            # 1. Get or Create Organization
            org_query = select(Organization).where(
                Organization.name == DEFAULT_ORG_NAME
            )
            org_result = await session.execute(org_query)
            org = org_result.scalar_one_or_none()

            if not org:
                logger.info(f"Creating organization: {DEFAULT_ORG_NAME}")
                org = Organization(
                    name=DEFAULT_ORG_NAME,  # id auto-generated by model
                    description="Default organization for system admin.",
                    is_active=True,
                    status="active"  # Assuming 'active' is a valid status
                )
                session.add(org)
                await session.flush()  # Ensure org.id is available
            else:
                logger.info(
                    f"Organization '{DEFAULT_ORG_NAME}' already exists."
                )

            # 2. Get or Create Role
            role_query = select(Role).where(
                Role.name == ADMIN_ROLE_NAME,
                Role.organization_id == org.id
            )
            role_result = await session.execute(role_query)
            admin_role = role_result.scalar_one_or_none()

            if not admin_role:
                logger.info(
                    f"Creating role: {ADMIN_ROLE_NAME} for org {org.name}"
                )
                admin_role = Role(
                    name=ADMIN_ROLE_NAME,  # id auto-generated by model
                    description="System Administrator with full privileges.",
                    organization_id=org.id,
                    # server_default handles empty permissions dict
                    permissions={"system": ["all"]}
                )
                session.add(admin_role)
                await session.flush()  # Ensure admin_role.id is available
            else:
                logger.info(
                    f"Role '{ADMIN_ROLE_NAME}' for org '{org.name}' "
                    f"already exists."
                )

            # 3. Get or Create Admin User
            user_query = select(User).where(User.email == ADMIN_EMAIL)
            user_result = await session.execute(user_query)
            admin_user = user_result.scalar_one_or_none()

            if not admin_user:
                logger.info(f"Creating admin user: {ADMIN_EMAIL}")
                admin_user = User(
                    username=ADMIN_EMAIL,
                    email=ADMIN_EMAIL,
                    first_name="Admin",
                    last_name="User",
                    role_id=admin_role.id,
                    organization_id=org.id,
                    is_active=True,
                    is_superuser=True  # For JWT payload and auth logic
                )
                admin_user.set_password(ADMIN_PASSWORD)  # Hashes password
                session.add(admin_user)
                logger.info(
                    f"Admin user '{ADMIN_EMAIL}' created successfully "
                    f"with password '{ADMIN_PASSWORD}'."
                )
            else:
                logger.info(
                    f"Admin user '{ADMIN_EMAIL}' already exists. "
                    f"Verifying attributes..."
                )
                admin_user.is_active = True
                admin_user.is_superuser = True
                admin_user.role_id = admin_role.id
                admin_user.organization_id = org.id
                # Optionally reset password each time:
                # admin_user.set_password(ADMIN_PASSWORD)

        # `session.begin()` handles commit/rollback
    logger.info("Seeding process finished.")


async def main():
    """Main function to run the seeding process."""
    logger.info("Starting database seeding for admin user...")
    # Assumes tables exist (e.g., via Alembic migrations).
    # To create tables for a fresh dev setup, you might adapt:
    # from backend.app.core.database import Base
    # async with engine.begin() as conn:
    #     await conn.run_sync(Base.metadata.create_all)

    await seed_data()
    await engine.dispose()  # Clean up engine resources
    logger.info("Engine disposed. Seeding complete.")


if __name__ == "__main__":
    # To run this script:
    # 1. Activate virtual environment.
    # 2. CD to project root.
    # 3. Run: python -m backend.scripts.seed_admin_user
    # This ensures Python's import system correctly locates modules.
    asyncio.run(main())
